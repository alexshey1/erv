// Servi√ßo para integra√ß√£o com Google Gemini AI

export interface GeminiRequest {
  contents: Array<{
    parts: Array<{
      text?: string
      inline_data?: {
        mime_type: string
        data: string
      }
    }>
  }>
}

export interface GeminiResponse {
  candidates: Array<{
    content: {
      parts: Array<{
        text: string
      }>
    }
  }>
}

export interface CultivationAnalysisRequest {
  sensorData: Array<{
    sensorType: string
    value: number
    unit: string
    timestamp: string
  }>
  cultivationInfo: {
    strain: string
    phase: string
    daysSinceStart: number
    numPlants: number
  }
  userQuery?: string
  includeRecommendations?: boolean
  includePredictions?: boolean
}

export interface CultivationAnalysisResponse {
  analysis: string
  recommendations: string[]
  anomalies: Array<{
    parameter: string
    severity: 'low' | 'medium' | 'high' | 'critical'
    description: string
    recommendation: string
  }>
  timestamp: string
}

export class GeminiService {
  private apiKey: string
  private baseUrl = "https://generativelanguage.googleapis.com/v1beta/models"

  constructor(apiKey: string) {
    if (!apiKey || apiKey.trim() === '') {
      throw new Error('Chave da API Gemini √© obrigat√≥ria')
    }
    this.apiKey = apiKey.trim()
  }

  async analyzeCultivationData(request: CultivationAnalysisRequest): Promise<CultivationAnalysisResponse> {
    try {
      console.log('ü§ñ Iniciando an√°lise com Gemini AI...')
      console.log('üîë Usando API Key:', this.apiKey.substring(0, 10) + '...')
      
      const prompt = this.buildAnalysisPrompt(request)
      
      const geminiRequest: GeminiRequest = {
        contents: [{
          parts: [{
            text: prompt
          }]
        }]
      }

      console.log('üì§ Enviando requisi√ß√£o para:', `${this.baseUrl}/gemini-1.5-flash:generateContent`)
      console.log('üì¶ Payload:', JSON.stringify(geminiRequest, null, 2))

      let response: Response
      try {
        response = await fetch(`${this.baseUrl}/gemini-1.5-flash:generateContent?key=${this.apiKey}`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json'
          },
          body: JSON.stringify(geminiRequest)
        })
        console.log('‚úÖ Fetch executado com sucesso')
      } catch (fetchError: any) {
        console.error('‚ùå Erro no fetch:', fetchError)
        console.error('‚ùå Tipo do erro fetch:', fetchError.constructor?.name)
        console.error('‚ùå Mensagem do erro fetch:', fetchError.message)
        throw fetchError
      }

      console.log('üì• Status da resposta:', response.status)
      console.log('üì• Headers da resposta:', Object.fromEntries(response.headers.entries()))

      if (!response.ok) {
        const errorText = await response.text()
        console.error('‚ùå Erro na resposta da API:', errorText)
        throw new Error(`Erro na API Gemini: ${response.status} - ${errorText}`)
      }

      const data: GeminiResponse = await response.json()
      console.log('‚úÖ Resposta recebida com sucesso')
      
      return this.parseAnalysisResponse(data, request)
    } catch (error) {
      console.error('‚ùå Erro na an√°lise Gemini:', error)
      
      // Verificar se √© erro de rede
      if (error instanceof TypeError && error.message.includes('fetch')) {
        return {
          analysis: "Erro de conex√£o com a API Gemini. Verifique sua conex√£o com a internet.",
          recommendations: ["Verifique a conex√£o com a internet", "Tente novamente em alguns minutos"],
          anomalies: [],
          timestamp: new Date().toISOString()
        }
      }
      
      // Verificar se √© erro de API key
      if (error instanceof Error && error.message.includes('401')) {
        return {
          analysis: "Erro de autentica√ß√£o com a API Gemini. Verifique a chave da API.",
          recommendations: ["Verifique se a chave da API Gemini est√° correta", "Confirme se a API est√° habilitada"],
          anomalies: [],
          timestamp: new Date().toISOString()
        }
      }
      
      return {
        analysis: `Erro na an√°lise dos dados: ${error instanceof Error ? error.message : 'Erro desconhecido'}`,
        recommendations: ["Verifique a configura√ß√£o da API Gemini", "Tente novamente mais tarde"],
        anomalies: [],
        timestamp: new Date().toISOString()
      }
    }
  }

  async analyzePlantHealth(
    imageData: string, 
    sensorData: Array<{sensorType: string, value: number, unit: string}>,
    cultivationPhase: string
  ): Promise<CultivationAnalysisResponse> {
    try {
      console.log('üåø Analisando sa√∫de da planta com imagem...')
      
      const prompt = this.buildImageAnalysisPrompt(sensorData, cultivationPhase)
      
      const geminiRequest: GeminiRequest = {
        contents: [{
          parts: [
            {
              text: prompt
            },
            {
              inline_data: {
                mime_type: "image/jpeg",
                data: imageData
              }
            }
          ]
        }]
      }

      const response = await fetch(`${this.baseUrl}/gemini-pro-vision:generateContent?key=${this.apiKey}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(geminiRequest)
      })

      if (!response.ok) {
        throw new Error(`Erro na API Gemini Vision: ${response.status}`)
      }

      const data: GeminiResponse = await response.json()
      
      return this.parseImageAnalysisResponse(data, sensorData)
    } catch (error) {
      console.error('‚ùå Erro na an√°lise visual:', error)
      return {
        analysis: "Erro na an√°lise visual da planta",
        recommendations: ["Verifique a qualidade da imagem"],
        anomalies: [],
        timestamp: new Date().toISOString()
      }
    }
  }

  async generateRecommendations(
    sensorData: Array<{sensorType: string, value: number, unit: string}>,
    cultivationInfo: {strain: string, phase: string, daysSinceStart: number}
  ): Promise<string[]> {
    try {
      console.log('üí° Gerando recomenda√ß√µes espec√≠ficas...')
      
      const prompt = this.buildRecommendationsPrompt(sensorData, cultivationInfo)
      
      const geminiRequest: GeminiRequest = {
        contents: [{
          parts: [{
            text: prompt
          }]
        }]
      }

      const response = await fetch(`${this.baseUrl}/gemini-1.5-flash:generateContent?key=${this.apiKey}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(geminiRequest)
      })

      if (!response.ok) {
        throw new Error(`Erro na API Gemini: ${response.status}`)
      }

      const data: GeminiResponse = await response.json()
      
      return this.parseRecommendationsResponse(data)
    } catch (error) {
      console.error('‚ùå Erro ao gerar recomenda√ß√µes:', error)
      return ["Verifique os dados dos sensores para gerar recomenda√ß√µes"]
    }
  }

  async chatCompletion(prompt: string): Promise<string> {
    try {
      console.log('üí¨ Iniciando chat completion com Gemini...')
      
      const geminiRequest = {
        contents: [{ parts: [{ text: prompt }] }]
      }
      
      const response = await fetch(`${this.baseUrl}/gemini-1.5-flash:generateContent?key=${this.apiKey}`, {
        method: 'POST',
        headers: { 
          'Content-Type': 'application/json',
          'Accept': 'application/json'
        },
        body: JSON.stringify(geminiRequest)
      })
      
      if (!response.ok) {
        const errorText = await response.text()
        console.error('‚ùå Erro na API Gemini (chat):', errorText)
        throw new Error(`Erro na API Gemini: ${response.status} - ${errorText}`)
      }
      
      const data = await response.json()
      return data.candidates?.[0]?.content?.parts?.[0]?.text || 'Sem resposta da IA.'
    } catch (error) {
      console.error('‚ùå Erro no chat completion:', error)
      throw error
    }
  }

  private buildAnalysisPrompt(request: CultivationAnalysisRequest): string {
    const sensorDataText = request.sensorData.map(data => 
      `- ${data.sensorType}: ${data.value} ${data.unit} (${data.timestamp})`
    ).join('\n')

    return `Voc√™ √© um especialista em agronomia e cultivo de cannabis com mais de 15 anos de experi√™ncia. Sua tarefa √© gerar um RELAT√ìRIO T√âCNICO PROFISSIONAL detalhado baseado nos dados fornecidos.

=== RELAT√ìRIO T√âCNICO DE AN√ÅLISE DE CULTIVO ===

INFORMA√á√ïES T√âCNICAS DO CULTIVO:
- Strain: ${request.cultivationInfo.strain}
- Fase Atual: ${request.cultivationInfo.phase}
- Dias desde o In√≠cio: ${request.cultivationInfo.daysSinceStart}
- Popula√ß√£o: ${request.cultivationInfo.numPlants} plantas
- Data da An√°lise: ${new Date().toISOString()}

DADOS AMBIENTAIS COLETADOS:
${sensorDataText}

=== PAR√ÇMETROS T√âCNICOS DE REFER√äNCIA ===

FASE VEGETATIVA (Dias 1-60):
- Temperatura Ideal: 24-30¬∞C (√≥timo para fotoss√≠ntese e crescimento celular)
- Umidade Relativa: 60-70% (promove desenvolvimento radicular)
- pH do Substrato: 5.8-6.2 (√≥tima disponibilidade de nutrientes)
- Condutividade El√©trica (EC): 1.0-1.6 mS/cm (nutri√ß√£o balanceada)

FASE DE FLORA√á√ÉO (Dias 61-120):
- Temperatura Ideal: 24-30¬∞C (preserva terpenos e canabinoides)
- Umidade Relativa: 40-50% (previne Botrytis cinerea e mofo)
- pH do Substrato: 5.8-6.2 (absor√ß√£o otimizada de P e K)
- Condutividade El√©trica (EC): 1.6-2.2 mS/cm (nutri√ß√£o de flora√ß√£o)

LIMITES CR√çTICOS DE SEGURAN√áA:
- Temperatura M√°xima: 31¬∞C (acima diminui 15-20% da pot√™ncia do THC)
- Temperatura M√≠nima: 15.5¬∞C (abaixo reduz metabolismo e produ√ß√£o)
- Umidade M√°xima Flora√ß√£o: 70% (risco cr√≠tico de mofo)
- pH Cr√≠tico: <5.5 ou >7.0 (bloqueio nutricional)

=== METODOLOGIA DE AN√ÅLISE ===

1. AN√ÅLISE COMPARATIVA:
   - Compara√ß√£o com par√¢metros ideais para a fase atual
   - C√°lculo de desvios percentuais
   - Identifica√ß√£o de tend√™ncias temporais

2. CLASSIFICA√á√ÉO DE SEVERIDADE:
   - BAIXA: Desvio ‚â§10% do ideal (monitoramento)
   - M√âDIA: Desvio 10-25% do ideal (ajustes menores)
   - ALTA: Desvio 25-40% do ideal (corre√ß√µes urgentes)
   - CR√çTICA: Desvio >40% do ideal (a√ß√£o imediata)

3. AN√ÅLISE DE CORRELA√á√ïES:
   - Intera√ß√£o entre par√¢metros
   - Efeitos cascata de desvios
   - Impacto no rendimento final

=== REQUISITOS DO RELAT√ìRIO ===

Gere um relat√≥rio t√©cnico profissional que inclua:

1. RESUMO EXECUTIVO: Vis√£o geral da sa√∫de do cultivo
2. AN√ÅLISE DETALHADA: Interpreta√ß√£o t√©cnica dos dados
3. IDENTIFICA√á√ÉO DE DESVIOS: Problemas detectados com classifica√ß√£o
4. RECOMENDA√á√ïES T√âCNICAS: A√ß√µes espec√≠ficas e mensur√°veis
5. PROGN√ìSTICO: Impacto esperado das corre√ß√µes

=== FORMATO DE RESPOSTA ===

Responda APENAS com um objeto JSON v√°lido, sem texto adicional. O JSON deve ter exatamente esta estrutura:

{
  "analysis": "RELAT√ìRIO T√âCNICO DETALHADO: [Incluir an√°lise t√©cnica completa com terminologia agron√¥mica, interpreta√ß√£o de dados, identifica√ß√£o de padr√µes, correla√ß√µes entre par√¢metros, impacto na fisiologia da planta, e progn√≥stico baseado em evid√™ncias cient√≠ficas]",
  "recommendations": [
    "RECOMENDA√á√ÉO T√âCNICA 1: [A√ß√£o espec√≠fica com valores-alvo e justificativa t√©cnica]",
    "RECOMENDA√á√ÉO T√âCNICA 2: [A√ß√£o espec√≠fica com valores-alvo e justificativa t√©cnica]",
    "RECOMENDA√á√ÉO T√âCNICA 3: [A√ß√£o espec√≠fica com valores-alvo e justificativa t√©cnica]"
  ],
  "anomalies": [
    {
      "parameter": "humidity",
      "severity": "critical",
      "description": "ALERTA: Umidade 75% est√° 50% acima do ideal (40-50%) para flora√ß√£o. Risco elevado de Botrytis cinerea e redu√ß√£o de 20-30% no rendimento final.",
      "recommendation": "AJUSTE: Reduzir umidade para 45% (¬±2%) atrav√©s de aumento da ventila√ß√£o e/ou desumidificador. Monitorar a cada 2 horas."
    },
    {
      "parameter": "temperature",
      "severity": "low",
      "description": "ALERTA: Temperatura 26¬∞C est√° dentro do ideal (24-30¬∞C) para flora√ß√£o. Condi√ß√µes √≥timas para desenvolvimento de terpenos.",
      "recommendation": "AJUSTE: Manter temperatura atual. Monitoramento cont√≠nuo recomendado."
    }
  ]
}

IMPORTANTE: Use terminologia t√©cnica agron√¥mica, seja espec√≠fico com valores e justificativas cient√≠ficas. O relat√≥rio deve ser de n√≠vel profissional para agr√¥nomos e t√©cnicos especializados.

Responda APENAS o JSON, nada mais.`
  }

  private buildImageAnalysisPrompt(
    sensorData: Array<{sensorType: string, value: number, unit: string}>,
    cultivationPhase: string
  ): string {
    return `
    Analise esta imagem de planta de cannabis junto com os dados dos sensores.

    FASE DO CULTIVO: ${cultivationPhase}

    DADOS DOS SENSORES:
    ${sensorData.map(data => 
      `- ${data.sensorType}: ${data.value} ${data.unit}`
    ).join('\n')}

    Identifique e analise:
    1. Sinais visuais de sa√∫de da planta
    2. Poss√≠veis problemas (defici√™ncias, excessos, pragas)
    3. Correla√ß√£o entre dados dos sensores e apar√™ncia visual
    4. Recomenda√ß√µes espec√≠ficas para otimiza√ß√£o

    Forne√ßa a an√°lise em formato JSON com:
    - "analysis": An√°lise visual detalhada
    - "recommendations": Array de recomenda√ß√µes
    - "predictions": Previs√µes baseadas na sa√∫de visual
    - "anomalies": Desvios detectados visualmente

    Responda APENAS em JSON v√°lido, sem texto adicional.
    `
  }

  private buildRecommendationsPrompt(
    sensorData: Array<{sensorType: string, value: number, unit: string}>,
    cultivationInfo: {strain: string, phase: string, daysSinceStart: number}
  ): string {
    return `Voc√™ √© um especialista em agronomia e cultivo de cannabis com mais de 15 anos de experi√™ncia. Sua tarefa √© gerar RECOMENDA√á√ïES T√âCNICAS PROFISSIONAIS baseadas nos dados fornecidos.

=== RELAT√ìRIO DE RECOMENDA√á√ïES T√âCNICAS ===

INFORMA√á√ïES T√âCNICAS DO CULTIVO:
- Strain: ${cultivationInfo.strain}
- Fase Atual: ${cultivationInfo.phase}
- Dias desde o In√≠cio: ${cultivationInfo.daysSinceStart}
- Data da An√°lise: ${new Date().toISOString()}

=== PAR√ÇMETROS T√âCNICOS DE REFER√äNCIA ===

FASE VEGETATIVA (Dias 1-60):
- Temperatura Ideal: 24-30¬∞C (√≥timo para fotoss√≠ntese e crescimento celular)
- Umidade Relativa: 60-70% (promove desenvolvimento radicular)
- pH do Substrato: 5.8-6.2 (√≥tima disponibilidade de nutrientes)
- Condutividade El√©trica (EC): 1.0-1.4 mS/cm (nutri√ß√£o balanceada)

FASE DE FLORA√á√ÉO (Dias 61-120):
- Temperatura Ideal: 24-30¬∞C (preserva terpenos e canabinoides)
- Umidade Relativa: 40-50% (previne Botrytis cinerea e mofo)
- pH do Substrato: 5.8-6.2 (absor√ß√£o otimizada de P e K)
- Condutividade El√©trica (EC): 1.6-2.2 mS/cm (nutri√ß√£o de flora√ß√£o)

LIMITES CR√çTICOS DE SEGURAN√áA:
- Temperatura M√°xima: 31¬∞C (acima diminui 15-20% da pot√™ncia do THC)
- Temperatura M√≠nima: 15.5¬∞C (abaixo reduz metabolismo e produ√ß√£o)
- Umidade M√°xima Flora√ß√£o: 70% (risco cr√≠tico de mofo)
- pH Cr√≠tico: <5.5 ou >7.0 (bloqueio nutricional)

DADOS AMBIENTAIS ATUAIS:
${sensorData.map(data => 
  `- ${data.sensorType}: ${data.value} ${data.unit}`
).join('\n')}

=== METODOLOGIA DE AN√ÅLISE ===

1. AN√ÅLISE COMPARATIVA:
   - Compara√ß√£o com par√¢metros ideais para a fase atual
   - C√°lculo de desvios percentuais
   - Identifica√ß√£o de tend√™ncias temporais

2. CLASSIFICA√á√ÉO DE PRIORIDADE:
   - BAIXA: Desvio ‚â§10% do ideal (monitoramento)
   - M√âDIA: Desvio 10-25% do ideal (ajustes menores)
   - ALTA: Desvio 25-40% do ideal (corre√ß√µes urgentes)
   - CR√çTICA: Desvio >40% do ideal (a√ß√£o imediata)

3. AN√ÅLISE DE CORRELA√á√ïES:
   - Intera√ß√£o entre par√¢metros
   - Efeitos cascata de desvios
   - Impacto no rendimento final

=== REQUISITOS DAS RECOMENDA√á√ïES ===

Gere recomenda√ß√µes t√©cnicas profissionais que incluam:

1. A√á√ïES ESPEC√çFICAS: Comandos claros e mensur√°veis
2. VALORES-ALVO: Par√¢metros espec√≠ficos a serem atingidos
3. JUSTIFICATIVA T√âCNICA: Base cient√≠fica para cada recomenda√ß√£o
4. PRIORIZA√á√ÉO: Ordem de import√¢ncia baseada na severidade
5. MONITORAMENTO: Como verificar a efic√°cia das a√ß√µes

=== FORMATO DE RESPOSTA ===

Responda APENAS com um array JSON v√°lido, sem texto adicional. O array deve conter 5-8 recomenda√ß√µes t√©cnicas espec√≠ficas e acion√°veis.

Exemplo de resposta:
[
  "URGENTE - UMIDADE: Reduzir umidade para 45% (¬±2%) imediatamente. Valor atual 75% est√° 50% acima do ideal para flora√ß√£o. Risco cr√≠tico de Botrytis cinerea. A√ß√£o: Aumentar ventila√ß√£o e/ou instalar desumidificador. Monitorar a cada 2 horas.",
  "TEMPERATURA - ADEQUADA: Manter temperatura atual de 26¬∞C. Dentro do ideal (24-30¬∞C) para flora√ß√£o. Condi√ß√µes √≥timas para desenvolvimento de terpenos. A√ß√£o: Monitoramento cont√≠nuo.",
  "pH - MONITORAMENTO: Verificar pH diariamente e manter entre 5.8-6.2. Valor atual 6.2 est√° adequado. A√ß√£o: Medir pH da solu√ß√£o nutritiva antes de cada rega.",
  "EC - AJUSTE: Ajustar condutividade el√©trica para 1.6-2.2 mS/cm na flora√ß√£o. Valor atual 1.4 est√° abaixo do ideal. A√ß√£o: Aumentar concentra√ß√£o de nutrientes gradualmente.",
  "VENTILA√á√ÉO - VERIFICA√á√ÉO: Verificar sistema de ventila√ß√£o para controlar umidade. A√ß√£o: Limpar filtros e verificar funcionamento dos ventiladores."
]

IMPORTANTE: Use terminologia t√©cnica agron√¥mica, seja espec√≠fico com valores e justificativas cient√≠ficas. As recomenda√ß√µes devem ser de n√≠vel profissional para agr√¥nomos e t√©cnicos especializados.

Responda APENAS o array JSON, nada mais.`
  }

  private parseAnalysisResponse(data: GeminiResponse, request: CultivationAnalysisRequest): CultivationAnalysisResponse {
    try {
      console.log('üîç Resposta bruta do Gemini:', JSON.stringify(data, null, 2));
      
      if (!data.candidates || data.candidates.length === 0) {
        console.error('‚ùå Nenhum candidato encontrado na resposta do Gemini');
        throw new Error('Resposta inv√°lida do Gemini');
      }

      const responseText = data.candidates[0].content.parts[0].text;
      console.log('üìù Texto da resposta:', responseText);
      
      // Limpar e tentar fazer parse do JSON
      let parsed;
      let cleanedText = responseText.trim();
      
      // Remover poss√≠veis caracteres extras no in√≠cio
      if (cleanedText.startsWith('```json')) {
        cleanedText = cleanedText.replace('```json', '').replace('```', '').trim();
      }
      if (cleanedText.startsWith('```')) {
        cleanedText = cleanedText.replace(/```/g, '').trim();
      }
      
      console.log('üßπ Texto limpo:', cleanedText);
      
      try {
        parsed = JSON.parse(cleanedText);
        console.log('‚úÖ Parse JSON bem-sucedido:', JSON.stringify(parsed, null, 2));
      } catch (parseError) {
        console.error('‚ùå Erro ao fazer parse do JSON:', parseError);
        console.log('üìù Tentando extrair JSON do texto...');
        
        // Tentar extrair JSON do texto se houver
        const jsonMatch = cleanedText.match(/\{[\s\S]*\}/);
        if (jsonMatch) {
          try {
            parsed = JSON.parse(jsonMatch[0]);
            console.log('‚úÖ JSON extra√≠do com sucesso:', JSON.stringify(parsed, null, 2));
          } catch (extractError) {
            console.error('‚ùå Erro ao extrair JSON:', extractError);
            console.log('üìù Tentando criar resposta padr√£o...');
            
            // Criar resposta padr√£o baseada no texto
            parsed = this.createDefaultResponse(cleanedText);
          }
        } else {
          console.log('üìù Nenhum JSON encontrado, criando resposta padr√£o...');
          parsed = this.createDefaultResponse(cleanedText);
        }
      }
      
      return {
        analysis: parsed.analysis || "An√°lise n√£o dispon√≠vel",
        recommendations: parsed.recommendations || [],
        anomalies: parsed.anomalies || [],
        timestamp: new Date().toISOString()
      }
    } catch (error) {
      console.error("‚ùå Erro ao fazer parse da resposta Gemini:", error);
      console.log("üìù Resposta que causou erro:", JSON.stringify(data, null, 2));
      
      return {
        analysis: "Erro na an√°lise dos dados",
        recommendations: ["Verifique os dados dos sensores"],
        anomalies: [],
        timestamp: new Date().toISOString()
      }
    }
  }

  private parseImageAnalysisResponse(data: GeminiResponse, sensorData: Array<{sensorType: string, value: number, unit: string}>): CultivationAnalysisResponse {
    try {
      const responseText = data.candidates[0].content.parts[0].text
      const parsed = JSON.parse(responseText)
      
      return {
        analysis: parsed.analysis || "An√°lise visual n√£o dispon√≠vel",
        recommendations: parsed.recommendations || [],
        anomalies: parsed.anomalies || [],
        timestamp: new Date().toISOString()
      }
    } catch (error) {
      console.error("‚ùå Erro ao fazer parse da an√°lise visual:", error)
      return {
        analysis: "Erro na an√°lise visual",
        recommendations: ["Verifique a qualidade da imagem"],
        anomalies: [],
        timestamp: new Date().toISOString()
      }
    }
  }

  private parseRecommendationsResponse(data: GeminiResponse): string[] {
    try {
      console.log('üîç Resposta bruta do Gemini (recomenda√ß√µes):', JSON.stringify(data, null, 2));
      
      if (!data.candidates || data.candidates.length === 0) {
        throw new Error('Resposta inv√°lida do Gemini');
      }

      const responseText = data.candidates[0].content.parts[0].text;
      console.log('üìù Texto da resposta (recomenda√ß√µes):', responseText);
      
      // Tentar fazer parse do JSON
      let parsed;
      let cleanedText = responseText.trim();
      
      // Remover poss√≠veis caracteres extras
      if (cleanedText.startsWith('```json')) {
        cleanedText = cleanedText.replace('```json', '').replace('```', '').trim();
      }
      if (cleanedText.startsWith('```')) {
        cleanedText = cleanedText.replace(/```/g, '').trim();
      }
      
      try {
        parsed = JSON.parse(cleanedText);
        console.log('‚úÖ Parse JSON bem-sucedido (recomenda√ß√µes):', JSON.stringify(parsed, null, 2));
      } catch (parseError) {
        console.error('‚ùå Erro ao fazer parse do JSON (recomenda√ß√µes):', parseError);
        console.log('üìù Tentando extrair JSON do texto...');
        
        // Tentar extrair JSON do texto se houver
        const jsonMatch = responseText.match(/\[[\s\S]*\]/);
        if (jsonMatch) {
          try {
            parsed = JSON.parse(jsonMatch[0]);
            console.log('‚úÖ JSON extra√≠do com sucesso (recomenda√ß√µes):', JSON.stringify(parsed, null, 2));
          } catch (extractError) {
            console.error('‚ùå Erro ao extrair JSON (recomenda√ß√µes):', extractError);
            throw new Error('N√£o foi poss√≠vel extrair JSON v√°lido da resposta');
          }
        } else {
          throw new Error('Nenhum JSON encontrado na resposta');
        }
      }
      
      return Array.isArray(parsed) ? parsed : [];
    } catch (error) {
      console.error("‚ùå Erro ao fazer parse das recomenda√ß√µes:", error);
      console.log("üìù Resposta que causou erro:", JSON.stringify(data, null, 2));
      return ["Verifique os dados dos sensores para gerar recomenda√ß√µes"];
    }
  }

  // Criar resposta padr√£o quando o JSON n√£o pode ser parseado
  private createDefaultResponse(text: string): any {
    console.log('üìù Criando resposta padr√£o baseada no texto:', text);
    
    // Tentar extrair informa√ß√µes do texto
    const analysis = text.includes('an√°lise') || text.includes('analysis') 
      ? text.substring(0, 200) + '...' 
      : 'An√°lise baseada nos dados fornecidos';
    
    const recommendations: string[] = [];
    const anomalies: Array<{
      parameter: string;
      severity: 'low' | 'medium' | 'high' | 'critical';
      description: string;
      recommendation: string;
    }> = [];
    
    // Extrair recomenda√ß√µes do texto
    const recMatches = text.match(/recomenda[√ßc][√£a]o[:\s]+([^.\n]+)/gi);
    if (recMatches) {
      recommendations.push(...recMatches.map(match => match.replace(/recomenda[√ßc][√£a]o[:\s]+/i, '').trim()));
    }
    
    // Extrair desvios do texto
    const deviationMatches = text.match(/desvio[:\s]+([^.\n]+)/gi);
    if (deviationMatches) {
      deviationMatches.forEach(match => {
        const description = match.replace(/desvio[:\s]+/i, '').trim();
        anomalies.push({
          parameter: 'unknown',
          severity: 'medium',
          description,
          recommendation: 'Verificar par√¢metros'
        });
      });
    }
    
    return {
      analysis,
      recommendations: recommendations.length > 0 ? recommendations : ['Monitorar par√¢metros'],
      anomalies
    };
  }
} 