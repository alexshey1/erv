const { createClient } = require('@supabase/supabase-js');
const { PrismaClient } = require('@prisma/client');

require('dotenv').config();

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
);

const prisma = new PrismaClient();

async function testSyncTrigger() {
  console.log('üß™ Testando trigger de sincroniza√ß√£o...\n');

  try {
    // 1. Verificar se o trigger existe
    console.log('1Ô∏è‚É£ Verificando se trigger foi criado...');
    const triggers = await prisma.$queryRaw`
      SELECT trigger_name, event_object_table, action_statement
      FROM information_schema.triggers 
      WHERE trigger_name = 'on_auth_user_created';
    `;
    
    if (triggers.length > 0) {
      console.log('‚úÖ Trigger encontrado:', triggers[0].trigger_name);
    } else {
      console.log('‚ùå Trigger n√£o encontrado - execute o SQL primeiro');
      return;
    }

    // 2. Contar usu√°rios antes do teste
    console.log('\n2Ô∏è‚É£ Contando usu√°rios antes do teste...');
    const authUsersBefore = await prisma.$queryRaw`SELECT COUNT(*) as count FROM auth.users;`;
    const publicUsersBefore = await prisma.$queryRaw`SELECT COUNT(*) as count FROM public.users;`;
    
    console.log(`   Auth users: ${authUsersBefore[0].count}`);
    console.log(`   Public users: ${publicUsersBefore[0].count}`);

    // 3. Criar usu√°rio via Supabase Auth
    console.log('\n3Ô∏è‚É£ Criando usu√°rio via Supabase Auth...');
    const testEmail = `sync-test-${Date.now()}@gmail.com`;
    
    const { data: authData, error: authError } = await supabase.auth.signUp({
      email: testEmail,
      password: 'SyncTest123!',
      options: {
        data: {
          name: 'Sync Test User'
        }
      }
    });

    if (authError) {
      console.error('‚ùå Erro ao criar usu√°rio:', authError.message);
      return;
    }

    console.log('‚úÖ Usu√°rio criado no Supabase Auth:', authData.user.id);

    // 4. Aguardar um pouco para o trigger executar
    console.log('\n4Ô∏è‚É£ Aguardando trigger executar...');
    await new Promise(resolve => setTimeout(resolve, 2000));

    // 5. Verificar se usu√°rio foi sincronizado
    console.log('\n5Ô∏è‚É£ Verificando sincroniza√ß√£o...');
    const syncedUser = await prisma.user.findUnique({
      where: { id: authData.user.id }
    });

    if (syncedUser) {
      console.log('üéâ SUCESSO! Usu√°rio sincronizado automaticamente:');
      console.log('   ID:', syncedUser.id);
      console.log('   Email:', syncedUser.email);
      console.log('   Nome:', syncedUser.name);
      console.log('   Role:', syncedUser.role);
    } else {
      console.log('‚ùå Usu√°rio N√ÉO foi sincronizado - trigger pode ter falhado');
      
      // Tentar sincroniza√ß√£o manual
      console.log('\nüîß Tentando sincroniza√ß√£o manual...');
      await prisma.$executeRaw`SELECT public.sync_existing_users();`;
      
      const manualSyncUser = await prisma.user.findUnique({
        where: { id: authData.user.id }
      });
      
      if (manualSyncUser) {
        console.log('‚úÖ Sincroniza√ß√£o manual funcionou!');
      } else {
        console.log('‚ùå Sincroniza√ß√£o manual tamb√©m falhou');
      }
    }

    // 6. Contar usu√°rios ap√≥s o teste
    console.log('\n6Ô∏è‚É£ Contando usu√°rios ap√≥s o teste...');
    const authUsersAfter = await prisma.$queryRaw`SELECT COUNT(*) as count FROM auth.users;`;
    const publicUsersAfter = await prisma.$queryRaw`SELECT COUNT(*) as count FROM public.users;`;
    
    console.log(`   Auth users: ${authUsersAfter[0].count} (+${authUsersAfter[0].count - authUsersBefore[0].count})`);
    console.log(`   Public users: ${publicUsersAfter[0].count} (+${publicUsersAfter[0].count - publicUsersBefore[0].count})`);

    // 7. Limpar usu√°rio de teste (opcional)
    console.log('\n7Ô∏è‚É£ Limpando usu√°rio de teste...');
    try {
      const supabaseService = createClient(
        process.env.NEXT_PUBLIC_SUPABASE_URL,
        process.env.SUPABASE_SERVICE_ROLE_KEY,
        { auth: { autoRefreshToken: false, persistSession: false } }
      );
      
      await supabaseService.auth.admin.deleteUser(authData.user.id);
      await prisma.user.delete({ where: { id: authData.user.id } });
      console.log('üßπ Usu√°rio de teste removido');
    } catch (cleanupError) {
      console.log('‚ö†Ô∏è  Erro na limpeza (normal):', cleanupError.message);
    }

    console.log('\nüéØ RESULTADO:');
    if (syncedUser) {
      console.log('‚úÖ Trigger de sincroniza√ß√£o est√° funcionando perfeitamente!');
      console.log('‚úÖ Usu√°rios ser√£o sincronizados automaticamente');
    } else {
      console.log('‚ö†Ô∏è  Trigger n√£o funcionou, mas sincroniza√ß√£o manual est√° dispon√≠vel');
    }

  } catch (error) {
    console.error('‚ùå Erro durante teste:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

testSyncTrigger();